[tool.poetry]
name = "bmsdna-lakeapi"
version = "0.15.19"
description = ""
authors = ["DWH Team <you@example.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "bmsdna" }]

[tool.poetry.dependencies]
python = "^3.10"
pyyaml = "^6.0"
pypika = "^0.48.9"
duckdb = "^0.9.1"
polars = "0.18.0"

# schema stuff
jsonschema = { version = "^4.17.3", optional = true }
python2jsonschema = { version = "^0.8", optional = true }

# polars stuff
xlsx2csv = { version = "^0.8.1", optional = true }

# auth
argon2-cffi = { version = "^21.3.0", optional = true }

xlsxwriter = "^3.1.0"
pyjwt = { version = "^2.6.0", optional = true }
"ruamel.yaml" = { version = "^0.17.26", optional = true }
deltalake = "^0.12.0"
fastapi = "^0.104.0"
adbc-driver-sqlite = { version = "^0.5.1", optional = true }
arrow-odbc = { version = "^1.2.5", optional = true }
expandvars = "^0.9.0"
pandas = "^2.1.0"


[tool.poetry.group.dev.dependencies]
pyright = "^1.1.308"
black = "^23.3.0"
uvicorn = "^0.22.0"
psutil = "^5.9.5"
pycln = "^2.1.5"


[tool.poetry.group.test.dependencies]
faker = "^18.7.0"
pytest = "^7.3.1"
httpx = "^0.24.0"
pytest-env = "^0.8.1"
pytest-cov = "^4.0.0"
pytest-benchmark = "^4.0.0"
pytest-monitor = "^1.6.5"
coverage = { extras = ["toml"], version = "^7.2.7" }
docker = "^6.1.3"
pyodbc = "^4.0.39"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
venv = ".venv"
venvPath = "."
pythonVersion = "3.10"
typeCheckingMode = "basic"

[tool.black]
line-length = 119

[tool.poetry.extras]
schema = ["jsonschema", "python2jsonschema"]
polars = ["xlsx2csv"]
auth = ["argon2-cffi", "pyjwt"]
useradd = ["ruamel.yaml"]
sqlite = ["adbc-driver-sqlite"]
odbc = ["arrow-odbc"]


[tool.poetry.scripts]
validate_lakeapi_schema = { callable = "bmsdna.lakeapi.tools.validateschema:validate_schema_cli", extras = [
    "schema",
] }
add_lakeapi_user = { callable = "bmsdna.lakeapi.tools.useradd:useradd_cli", extras = [
    "useradd",
] }

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "@(abc.)?abstractmethod",
    "raise AssertionError",
    "raise NotImplementedError",
]
