[tool.poetry]
name = "bmsdna-lakeapi"
version = "0.16.18"
description = ""
authors = ["DWH Team <you@example.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "bmsdna" }]

[tool.poetry.dependencies]
python = "^3.10"
pyyaml = "^6.0"
pypika = "^0.48.9"
duckdb = "^0.9.2"
polars = "0.20.1"


# polars stuff
xlsx2csv = { version = "^0.8.1", optional = true }

# auth
argon2-cffi = { version = "^23.1.0", optional = true }

xlsxwriter = "^3.1.0"
pyjwt = { version = "^2.6.0", optional = true }
"ruamel.yaml" = { version = "^0.18.5", optional = true }
deltalake = ">=0.14.0"
fastapi = "^0.105.0"
arrow-odbc = { version = "^2.0.2", optional = true }
expandvars = "^0.9.0"
pandas = "^2.1.0"
fsspec = "^2023.10.0"
adlfs = "^2023.10.0"


[tool.poetry.group.dev.dependencies]
pyright = "^1.1.308"
black = "^23.3.0"
uvicorn = "^0.23.0"
psutil = "^5.9.5"
pycln = "^2.1.5"


[tool.poetry.group.test.dependencies]
faker = "^20.1.0"
pytest = "^7.3.1"
httpx = "^0.25.2"
pytest-env = "^1.1.3"
pytest-cov = "^4.0.0"
pytest-benchmark = "^4.0.0"
pytest-monitor = "^1.6.5"
coverage = { extras = ["toml"], version = "^7.2.7" }
docker = "^6.1.3"
pyodbc = "^5.0.1"
azure-storage-blob = "^12.12.0"
adbc-driver-sqlite = "^0.8.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
venv = ".venv"
venvPath = "."
pythonVersion = "3.10"
typeCheckingMode = "basic"

[tool.black]
line-length = 119

[tool.poetry.extras]
polars = ["xlsx2csv"]
auth = ["argon2-cffi", "pyjwt"]
useradd = ["ruamel.yaml"]
odbc = ["arrow-odbc"]


[tool.poetry.scripts]
validate_lakeapi_schema = { callable = "bmsdna.lakeapi.tools.validateschema:validate_schema_cli" }
add_lakeapi_user = { callable = "bmsdna.lakeapi.tools.useradd:useradd_cli", extras = [
    "useradd",
] }

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "@(abc.)?abstractmethod",
    "raise AssertionError",
    "raise NotImplementedError",
]
